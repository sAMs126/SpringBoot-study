<!--
scan:       当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
            当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。
debug:      当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="/usr/log"/>
    <!-- 定义日志文件名称 -->
    <property name="LOG_NAME" value="server"/>

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        日志输出格式：
			%d:          表示日期时间
			%thread:     表示线程名
			%-5level:    级别从左显示5个字符宽度
			%logger{50}: 表示logger名字最长50个字符，否则按照句点分割
			%msg:        日志消息
			%n:          是换行符
        -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <!-- 控制台也要使用utf-8 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- RollingFileAppender: 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为 xxx% 日期 %索引，新的日志仍然是 server.log -->
    <!-- 2.如果日期没有变化，但是当前日志文件的大小超过 20MB 时，对当前日志进行分割并重命名 -->
    <appender name="syslog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${LOG_NAME}.log</file>
        <!--
        rollingPolicy:          当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy: 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}: 按天进行日志滚动
            %i: 当文件大小超过 maxFileSize 时，按照 i 进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${LOG_NAME}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且 maxHistory 是365，则只保存最近 365 天的文件，删除之前的旧文件。注意，删除旧文件时，其对应的目录也会被删除。
            -->
            <maxHistory>365</maxHistory>
            <!-- maxFileSize: 活动文件的大小，默认值是10MB -->
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <!-- pattern 节点，用来设置日志的输入格式 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
            <!-- 设置日志字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--
    logger:     主要用于存放日志对象，也可以定义日志类型、级别
    name:       表示匹配的 logger 类型前缀，也就是包的前半部分
    level:      要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
    additivity: 作用在于 children-logger 是否使用 rootLogger 配置的 appender 进行输出
         false: 表示只用当前 logger 的 appender-ref，
         true:  表示当前 logger 的 appender-ref 和 rootLogger 的 appender-ref 都有效
    -->
    <!-- package logger -->
    <logger name="com.example" level="DEBUG"/>
    <!-- Spring framework logger -->
    <logger name="org.springframework" level="DEBUG" additivity="false"/>

    <!--
    root 与 logger 是父子关系，没有特别定义则默认为 root，任何一个类只会和一个 logger 对应，
    要么是定义的 logger，要么是 root，判断的关键在于找到这个 logger，然后判断这个 logger 的 appender 和 level。
    -->
    <root level="INFO">
        <appender-ref ref="stdout"/>
        <appender-ref ref="syslog"/>
    </root>
</configuration>